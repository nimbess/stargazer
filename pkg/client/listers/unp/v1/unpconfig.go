/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/nimbess/stargazer/pkg/crd/api/unp/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UnpConfigLister helps list UnpConfigs.
type UnpConfigLister interface {
	// List lists all UnpConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1.UnpConfig, err error)
	// UnpConfigs returns an object that can list and get UnpConfigs.
	UnpConfigs(namespace string) UnpConfigNamespaceLister
	UnpConfigListerExpansion
}

// unpConfigLister implements the UnpConfigLister interface.
type unpConfigLister struct {
	indexer cache.Indexer
}

// NewUnpConfigLister returns a new UnpConfigLister.
func NewUnpConfigLister(indexer cache.Indexer) UnpConfigLister {
	return &unpConfigLister{indexer: indexer}
}

// List lists all UnpConfigs in the indexer.
func (s *unpConfigLister) List(selector labels.Selector) (ret []*v1.UnpConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.UnpConfig))
	})
	return ret, err
}

// UnpConfigs returns an object that can list and get UnpConfigs.
func (s *unpConfigLister) UnpConfigs(namespace string) UnpConfigNamespaceLister {
	return unpConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UnpConfigNamespaceLister helps list and get UnpConfigs.
type UnpConfigNamespaceLister interface {
	// List lists all UnpConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.UnpConfig, err error)
	// Get retrieves the UnpConfig from the indexer for a given namespace and name.
	Get(name string) (*v1.UnpConfig, error)
	UnpConfigNamespaceListerExpansion
}

// unpConfigNamespaceLister implements the UnpConfigNamespaceLister
// interface.
type unpConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UnpConfigs in the indexer for a given namespace.
func (s unpConfigNamespaceLister) List(selector labels.Selector) (ret []*v1.UnpConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.UnpConfig))
	})
	return ret, err
}

// Get retrieves the UnpConfig from the indexer for a given namespace and name.
func (s unpConfigNamespaceLister) Get(name string) (*v1.UnpConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("unpconfig"), name)
	}
	return obj.(*v1.UnpConfig), nil
}
