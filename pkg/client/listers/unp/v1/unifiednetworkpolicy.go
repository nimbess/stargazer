/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/nimbess/stargazer/pkg/crd/api/unp/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UnifiedNetworkPolicyLister helps list UnifiedNetworkPolicies.
type UnifiedNetworkPolicyLister interface {
	// List lists all UnifiedNetworkPolicies in the indexer.
	List(selector labels.Selector) (ret []*v1.UnifiedNetworkPolicy, err error)
	// UnifiedNetworkPolicies returns an object that can list and get UnifiedNetworkPolicies.
	UnifiedNetworkPolicies(namespace string) UnifiedNetworkPolicyNamespaceLister
	UnifiedNetworkPolicyListerExpansion
}

// unifiedNetworkPolicyLister implements the UnifiedNetworkPolicyLister interface.
type unifiedNetworkPolicyLister struct {
	indexer cache.Indexer
}

// NewUnifiedNetworkPolicyLister returns a new UnifiedNetworkPolicyLister.
func NewUnifiedNetworkPolicyLister(indexer cache.Indexer) UnifiedNetworkPolicyLister {
	return &unifiedNetworkPolicyLister{indexer: indexer}
}

// List lists all UnifiedNetworkPolicies in the indexer.
func (s *unifiedNetworkPolicyLister) List(selector labels.Selector) (ret []*v1.UnifiedNetworkPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.UnifiedNetworkPolicy))
	})
	return ret, err
}

// UnifiedNetworkPolicies returns an object that can list and get UnifiedNetworkPolicies.
func (s *unifiedNetworkPolicyLister) UnifiedNetworkPolicies(namespace string) UnifiedNetworkPolicyNamespaceLister {
	return unifiedNetworkPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UnifiedNetworkPolicyNamespaceLister helps list and get UnifiedNetworkPolicies.
type UnifiedNetworkPolicyNamespaceLister interface {
	// List lists all UnifiedNetworkPolicies in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.UnifiedNetworkPolicy, err error)
	// Get retrieves the UnifiedNetworkPolicy from the indexer for a given namespace and name.
	Get(name string) (*v1.UnifiedNetworkPolicy, error)
	UnifiedNetworkPolicyNamespaceListerExpansion
}

// unifiedNetworkPolicyNamespaceLister implements the UnifiedNetworkPolicyNamespaceLister
// interface.
type unifiedNetworkPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UnifiedNetworkPolicies in the indexer for a given namespace.
func (s unifiedNetworkPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1.UnifiedNetworkPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.UnifiedNetworkPolicy))
	})
	return ret, err
}

// Get retrieves the UnifiedNetworkPolicy from the indexer for a given namespace and name.
func (s unifiedNetworkPolicyNamespaceLister) Get(name string) (*v1.UnifiedNetworkPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("unifiednetworkpolicy"), name)
	}
	return obj.(*v1.UnifiedNetworkPolicy), nil
}
